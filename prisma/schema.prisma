// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicFaculty {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students            Student[]
  academicDepartments AcademicDepartment[]
  faculties           Faculty[]

  @@map("academic_faculties")
}

model AcademicDepartment {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students  Student[]
  faculties Faculty[]

  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  offeredCourses    OfferedCourse[]

  @@map("academic_departments")
}

model AcademicSemester {
  id                    String                 @id @default(uuid())
  year                  Int
  title                 String
  code                  String
  startMonth            String
  endMonth              String
  isCurrent Boolean @default(false)

  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  students              Student[]
  semesterRegistrations SemesterRegistration[]

  @@map("academic_semesters")
}

model Student {
  id           String   @id @default(uuid())
  studentId    String
  firstName    String
  middleName   String
  lastName     String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodgroup   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicSemeter   AcademicSemester @relation(fields: [academicSemeterId], references: [id])
  academicSemeterId String

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  academicFaculty                   AcademicFaculty                     @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId                 String
  studentSemesterRegistrations      StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("students")
}

model Faculty {
  id           String   @id @default(uuid())
  facultyId    String
  firstName    String
  middleName   String
  lastName     String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodgroup   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  academicFaculty             AcademicFaculty              @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId           String
  courses                     CourseFaculty[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("faculties")
}

model Building {
  id          String @id @default(uuid())
  buidingName String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id       String @id @default(uuid())
  roomName String @unique
  floor    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  building                    Building                     @relation(fields: [buildingId], references: [id])
  buildingId                  String
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("rooms")
}

model Course {
  id      String @id @default(uuid())
  title   String
  code    String
  credits Int    @default(0)

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  preRequisite    Prerequisite[]  @relation("course")
  preRequisiteFor Prerequisite[]  @relation("preRequisite")
  faculties       CourseFaculty[]
  offeredCourses  OfferedCourse[]
}

model Prerequisite {
  courseId       String
  preRequisiteId String

  course       Course @relation(fields: [courseId], references: [id], name: "course")
  preRequisite Course @relation(fields: [preRequisiteId], references: [id], name: "preRequisite")

  @@id([courseId, preRequisiteId])
  @@map("prerequities")
}

model CourseFaculty {
  courseId  String
  facultyId String

  course  Course  @relation(fields: [courseId], references: [id])
  faculty Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id        String                     @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  status    SemesterRegistrationStatus @default(UPCOMING)
  minCredit Int
  maxCredit Int

  academicSemesterId String
  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])

  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime                            @updatedAt
  offeredCourses                    OfferedCourse[]
  offeredCourseSections             OfferedCourseSection[]
  offeredCourseClassSchedules       OfferedCourseClassSchedule[]
  studentSemesterRegistrations      StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("semester_registrations")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

model OfferedCourse {
  id String @unique @default(uuid())

  courseId               String
  academicDepartmentId   String
  semesterRegistrationId String

  course               Course               @relation(fields: [courseId], references: [id])
  academicDepartment   AcademicDepartment   @relation(fields: [academicDepartmentId], references: [id])
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  offeredCourseSections OfferedCourseSection[]

  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime                            @updatedAt
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id String @unique @default(uuid())

  title             String
  maxCapacity       Int
  currentlyEnrolled Int

  offeredCourseId        String
  semesterRegistrationId String

  offeredCourse        OfferedCourse        @relation(fields: [offeredCourseId], references: [id])
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime                            @updatedAt
  offeredCourseClassSchedules       OfferedCourseClassSchedule[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_course_sections")
}

model OfferedCourseClassSchedule {
  id String @unique @default(uuid())

  startTime String
  endTime   String

  dayOfWeek WeekDays

  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  roodId String
  room   Room   @relation(fields: [roodId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("offered_course_class_schedules")
}

model StudentSemesterRegistration {
  id                String  @unique @default(uuid())
  isConfirmed       Boolean @default(false)
  totalCreditsTaken Int     @default(0)

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("student_semester_registrations")
}

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model StudentSemesterRegistrationCourse {
  semesterRegistrationId String
  studentId              String
  offeredCourseId        String
  offeredCourseSectionId String

  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  student              Student              @relation(fields: [studentId], references: [id])
  offeredCourse        OfferedCourse        @relation(fields: [offeredCourseId], references: [id])
  offeredCourseSection OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([semesterRegistrationId, studentId, offeredCourseId])
  @@map("student_semester_registration_courses")
}
